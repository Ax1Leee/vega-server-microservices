// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: micro/movie/movie.proto

package movie

import (
	fmt "fmt"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MovieService service

type MovieService interface {
	GetMovie(ctx context.Context, in *GetMovieRequest, opts ...client.CallOption) (*GetMovieResponse, error)
}

type movieService struct {
	c    client.Client
	name string
}

func NewMovieService(name string, c client.Client) MovieService {
	return &movieService{
		c:    c,
		name: name,
	}
}

func (c *movieService) GetMovie(ctx context.Context, in *GetMovieRequest, opts ...client.CallOption) (*GetMovieResponse, error) {
	req := c.c.NewRequest(c.name, "MovieService.GetMovie", in)
	out := new(GetMovieResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MovieService service

type MovieServiceHandler interface {
	GetMovie(context.Context, *GetMovieRequest, *GetMovieResponse) error
}

func RegisterMovieServiceHandler(s server.Server, hdlr MovieServiceHandler, opts ...server.HandlerOption) error {
	type movieService interface {
		GetMovie(ctx context.Context, in *GetMovieRequest, out *GetMovieResponse) error
	}
	type MovieService struct {
		movieService
	}
	h := &movieServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MovieService{h}, opts...))
}

type movieServiceHandler struct {
	MovieServiceHandler
}

func (h *movieServiceHandler) GetMovie(ctx context.Context, in *GetMovieRequest, out *GetMovieResponse) error {
	return h.MovieServiceHandler.GetMovie(ctx, in, out)
}
